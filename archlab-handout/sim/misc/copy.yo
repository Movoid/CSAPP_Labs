                            | # Y86-64 ASM
                            | # %rax, %rcx, %rdx, %rsi, %rdi Caller-Saved
                            | # %rbx, %rbp, %rsp             Callee-Saved
                            | 
                            | 
0x000:                      | .pos 0
0x000:                      | start_main:
0x000: 30f40008000000000000 |   irmovq stack, %rsp
0x00a: 804800000000000000   |   call main
0x013: 00                   |   halt
                            | 
0x018:                      | .align 8
0x018:                      | src:
0x018: 0a00000000000000     |   .quad 0x00a
0x020: b000000000000000     |   .quad 0x0b0
0x028: 000c000000000000     |   .quad 0xc00
                            | 
0x030:                      | dest:
0x030: 1101000000000000     |   .quad 0x111
0x038: 2202000000000000     |   .quad 0x222
0x040: 3303000000000000     |   .quad 0x333
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |   irmovq src, %rdi
0x052: 30f63000000000000000 |   irmovq dest, %rsi
0x05c: 30f21800000000000000 |   irmovq $24, %rdx  # MUST BE n*8 .
                            |                     # Y86_64 doesn't support 1 byte op.
0x066: 807000000000000000   |   call copy_block
0x06f: 90                   |   ret
                            | 
                            | 
                            | # %rax ret XOR sum
                            | # %rdi src
                            | # %rsi dst
                            | # %rdx len
                            | # %rcx $1
                            | # %rbx value
                            | # %rbp
                            | # %rsp stack
                            | 
0x070:                      | copy_block: 
0x070: a03f                 |   pushq %rbx # val
0x072: a05f                 |   pushq %rbp 
0x074: 30f10800000000000000 |   irmovq $8, %rcx
0x07e: 6300                 |   xorq %rax, %rax # result
0x080:                      | cond:
0x080: 6222                 |   andq %rdx, %rdx # len
0x082: 73b000000000000000   |   je end_ret
                            | 
0x08b:                      | loop:
0x08b: 50370000000000000000 |   mrmovq (%rdi), %rbx
0x095: 40360000000000000000 |   rmmovq %rbx, (%rsi)
0x09f: 6330                 |   xorq %rbx, %rax
0x0a1: 6112                 |   subq %rcx, %rdx
0x0a3: 6017                 |   addq %rcx, %rdi
0x0a5: 6016                 |   addq %rcx, %rsi
0x0a7: 708000000000000000   |   jmp cond
                            | 
0x0b0:                      | end_ret:
0x0b0: b05f                 |   popq %rbp
0x0b2: b03f                 |   popq %rbx
0x0b4: 90                   |   ret
                            | 
                            | 
0x800:                      | .pos 0x800
0x800:                      | stack:
