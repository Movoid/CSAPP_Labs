#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################

# %rax	ret non-zero byte cnt
# %rcx	way8
# %rdx	len
# %rbx	
# %rsp	stack
# %rbp	
# %rsi	dst
# %rdi	src
# %r8		way1
# %r9		way2
# %r10	way3
# %r11	way4
# %r12	way5
# %r13	way6
# %r14	way7

#	xorq %rax, %rax

loop_8_cond:
	iaddq $-8, %rdx
	jl loop_8_abort_fin

loop_8_way:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
loop_8_check_way1_nonzero:
	andq %r8, %r8
	rmmovq %r8, (%rsi)
	jle loop_8_check_way2_nonzero
	iaddq $1, %rax 

loop_8_check_way2_nonzero:
	andq %r9, %r9
	rmmovq %r9, 8(%rsi)
	jle loop_8_check_way3_nonzero
	iaddq $1, %rax 

loop_8_check_way3_nonzero:
	andq %r10, %r10
	rmmovq %r10, 16(%rsi)
	jle loop_8_check_way4_nonzero
	iaddq $1, %rax 

loop_8_check_way4_nonzero:
	andq %r11, %r11
	rmmovq %r11, 24(%rsi)
	jle loop_8_check_way5_nonzero
	iaddq $1, %rax 

loop_8_check_way5_nonzero:
	andq %r12, %r12
	rmmovq %r12, 32(%rsi)
	jle loop_8_check_way6_nonzero
	iaddq $1, %rax 

loop_8_check_way6_nonzero:
	andq %r13, %r13
	rmmovq %r13, 40(%rsi)
	jle loop_8_check_way7_nonzero
	iaddq $1, %rax 
	
loop_8_check_way7_nonzero:
	andq %r14, %r14
	rmmovq %r14, 48(%rsi)
	jle loop_8_check_way8_nonzero
	iaddq $1, %rax 
	
loop_8_check_way8_nonzero:
	andq %rcx, %rcx
	rmmovq %rcx, 56(%rsi)
	jle loop_8_success_fin
	iaddq $1, %rax 
	
loop_8_success_fin:
	iaddq $64, %rdi
	iaddq $64, %rsi
#	jmp loop_8_cond
	iaddq $-8, %rdx
	jge loop_8_way


loop_8_abort_fin:
#	iaddq $8, %rdx
# if `iaddq` remainder [0, 7].
# if no, remainder [-8, -1].

# *** Learnt from 
# [Arthals](https://arthals.ink/blog/arch-lab#%E4%BD%99%E6%95%B0%E5%88%A4%E6%96%AD%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E6%90%9C%E7%B4%A2)

handle_remainder: # %rdx [-8, -1]
	iaddq $4, %rdx
	# %rdx [-4, 3]
	jl handle_remainder_0_to_3

# %rdx [0, 3]
handle_remainder_4_to_7:
	iaddq $-2, %rdx
	# %rdx [-2, 1]
	jl handle_remainder_4_to_5

# %rdx [0, 1]
handle_remainder_6_to_7:
	mrmovq 40(%rdi), %rbx # preload the **FIRST** word which is covered in block. 
	je handle_remainder_6 # process the 6th (1-based) word, offset = 40.
	mrmovq 48(%rdi), %rbx
	jmp handle_remainder_7

# %rdx [-2, -1]
handle_remainder_4_to_5:
	iaddq $1, %rdx
	mrmovq 32(%rdi), %rbx
	je handle_remainder_5
	mrmovq 24(%rdi), %rbx
	jmp handle_remainder_4

handle_remainder_0_to_3:
	iaddq $2, %rdx
	jl handle_remainder_0_to_1


handle_remainder_2_to_3:
	mrmovq 8(%rdi), %rbx
	je handle_remainder_2
	mrmovq 16(%rdi), %rbx
	jmp handle_remainder_3

handle_remainder_0_to_1:
	iaddq $1, %rdx
	mrmovq (%rdi), %rbx
	je handle_remainder_1
	ret

handle_remainder_7:
	andq %rbx, %rbx
	rmmovq %rbx, 48(%rsi)
	mrmovq 40(%rdi), %rbx
	jle handle_remainder_6
	iaddq $1, %rax
handle_remainder_6:
	andq %rbx, %rbx
	rmmovq %rbx, 40(%rsi)
	mrmovq 32(%rdi), %rbx
	jle handle_remainder_5
	iaddq $1, %rax
handle_remainder_5:
	andq %rbx, %rbx
	rmmovq %rbx, 32(%rsi)
	mrmovq 24(%rdi), %rbx
	jle handle_remainder_4
	iaddq $1, %rax
handle_remainder_4:
	andq %rbx, %rbx
	rmmovq %rbx, 24(%rsi)
	mrmovq 16(%rdi), %rbx
	jle handle_remainder_3
	iaddq $1, %rax
handle_remainder_3:
	andq %rbx, %rbx
	rmmovq %rbx, 16(%rsi)
	mrmovq 8(%rdi), %rbx
	jle handle_remainder_2
	iaddq $1, %rax
handle_remainder_2:
	andq %rbx, %rbx
	rmmovq %rbx, 8(%rsi)
	mrmovq (%rdi), %rbx
	jle handle_remainder_1
	iaddq $1, %rax
handle_remainder_1:
	andq %rbx, %rbx
	rmmovq %rbx, (%rsi)
	jle Done
	iaddq $1, %rax
	


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
